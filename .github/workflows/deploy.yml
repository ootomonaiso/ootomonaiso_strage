name: Deploy to GitHub Pages

on:
  push:
    branches:
      - master

jobs:
  update-embeddings:
    name: Update Article Embeddings
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Install pro dependencies
        working-directory: pro
        run: npm ci

      # script ディレクトリで依存関係をインストール
      - name: Install script dependencies
        working-directory: script
        run: npm ci

      # Markdown 記事のベクトル化と DB の upsert／削除処理を実行（script フォルダ内の vectorize_articles.mjs を実行）
      - name: Run vectorization script
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          REACT_APP_GEMINI_API_KEY: ${{ secrets.REACT_APP_GEMINI_API_KEY }}
        working-directory: script
        run: node vectorize_articles.mjs

  build:
    name: Build Docusaurus Site and Generate Candidate Links
    needs: update-embeddings
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      # pro ディレクトリで依存関係のインストール
      - name: Install dependencies
        working-directory: pro
        run: npm ci

      - name: Inject env vars for frontend
        working-directory: pro
        run: |
          echo "REACT_APP_GEMINI_API_KEY=${{ secrets.REACT_APP_GEMINI_API_KEY }}" > .env
          echo "REACT_APP_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "REACT_APP_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env

      # Docusaurus サイトのビルド（pro/build に成果物が出力されるように設定）
      - name: Build Docusaurus site
        working-directory: pro
        run: npm run build

      # ビルド成果物に候補リンク用 JSON を生成（generate_candidate_links.js を実行）
      - name: Generate candidate links
        working-directory: pro
        run: node generate_candidate_links.mjs

      # ビルド成果物をアップロード
      - name: Upload Build Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: pro/build

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
