name: Deploy to GitHub Pages

on:
  push:
    branches:
      - master

jobs:
  update-embeddings:
    name: Update Article Embeddings
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Install pro dependencies
        working-directory: pro
        run: npm ci

      - name: Install script dependencies
        working-directory: script
        run: npm ci

      - name: Run vectorization script
        working-directory: script
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          REACT_APP_GEMINI_API_KEY: ${{ secrets.REACT_APP_GEMINI_API_KEY }}
          HUGGINGFACE_TOKEN: ${{ secrets.HF_TOKEN }}
        run: node vectorize_articles.mjs

  build:
    name: Build Docusaurus Site and Generate Candidate Links
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Clear npm cache
        working-directory: pro
        run: npm cache clean --force

      - name: Remove Docusaurus cache
        working-directory: pro
        run: rm -rf .docusaurus

      - name: Install dependencies
        working-directory: pro
        run: npm ci

      - name: Clear Docusaurus cache
        working-directory: pro
        run: npm run clear

      - name: Inject env vars for frontend
        working-directory: pro
        run: |
          echo "REACT_APP_GEMINI_API_KEY=${{ secrets.REACT_APP_GEMINI_API_KEY }}" > .env
          echo "REACT_APP_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "REACT_APP_SUPABASE_ANON_KEY=${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}" >> .env
          echo "DOCSEARCH_APP_ID=${{ secrets.DOCSEARCH_APP_ID }}" >> .env
          echo "DOCSEARCH_API_KEY=${{ secrets.DOCSEARCH_API_KEY }}" >> .env
          echo "DOCSEARCH_INDEX_NAME=${{ secrets.DOCSEARCH_INDEX_NAME }}" >> .env

      - name: Build Docusaurus site
        working-directory: pro
        run: npm run build

      - name: Generate candidate links
        working-directory: pro
        run: node generate_candidate_links.mjs

      - name: Upload Build Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: pro/build

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Send Discord Notification
        if: success()
        run: |
          # 作業ディレクトリが Git リポジトリであることを確認
          echo "Current directory: $(pwd)"
          ls -la

          # リポジトリの履歴をフルに取得
          git fetch --depth=2  # HEAD~1 を参照できるようにするために履歴を2つ前まで取得

          # 新規ページの公開通知
          UPDATED_FILES=$(git diff --name-only HEAD~1 HEAD)
          for FILE in $UPDATED_FILES; do
            # 'pro/' 部分を削除して正しい URL を作成
            CLEAN_FILE_PATH=${FILE#pro/}  # 'pro/' を取り除く

            # URLの作成
            PAGE_URL="https://ootomonaiso.github.io/ootomonaiso_strage/$CLEAN_FILE_PATH"
            
            # Markdown形式で通知メッセージを作成
            MESSAGE=":tada: **新しいページが公開されました！** :tada:\n\n[${CLEAN_FILE_PATH}](${PAGE_URL})"

            # Discord Webhook で通知
            curl -X POST -H "Content-Type: application/json" \
              -d '{"content": "'"$MESSAGE"'"}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}




